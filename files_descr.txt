____________<инструменты в папке tools>____________

alignAll.py
берёт все .fasta файлы в папке, делает папку 'alignments' (если таковой нет) и пишет в неё их выравнивания

getTaxId.py names_file names_and_tax_id_file
вход - файл (names_file, пример - id_name.txt) со строками с именами организмов, заключёнными между '=' и '\t'
выход - файл (names_and_tax_id_file, пример - id_name_tax_id.txt) с теми же строками, дополненными taxid, найденными на ncbi.
работает через http-запрос (модуль requests), требует тырнета

operonDbToXml.py operon_db_file, xml_db_file 
берёт на вход файл базы оперонов (operon_db_file, пример - Operon_db.txt), конвертит в xml (xml_db_file, пример - fb_8_dump.xml)

setValFromFile.py db_file, data_file, dest_file
вход - файл (db_file, пример - Gram.av) формата id:=name \t (идентификатор_в_бд:=имя сущности \t), файл (data_file, пример - Gram.tsv) формата name \t value (имя сущности \t значение свойства)
выход - файл (dest_file) формата id:=name \t value
используется для группового задания значений свойства через textarea выбранной колонки в attrColEdit. Если есть набор организмов поимённо с заданными значеиями свойства, имена организмов из БД сопоставляются с именами файла значений, при совпадении значение записывается к имени в выходном файле. 




____________</инструменты в папке tools>___________

*(морда) = выводится в браузер, т.е. требует cgi-заголовка

basic.css 
Общий css для всех модулей

jascr.js
Общий javascript для всех модулей

databases.txt
имя ## описание баз данных (с mysql connect'ом были проблемы подключения к СУБД без указания имени базы, пришлось извращаться)

htmlClasses.py
генерация html для прокручиваемых панелей, цветов субъединиц и ячеек таблиц

sharedVars.py
установка имён, настроек БД и др. инфы, сейчас испоьзуется только его часть, поскольку имена колонок свойств, выравниваний и баз генерятся и читаются автоматически.

sharedHtml.py
генерация полей форм (text, submit, textarea, select, checkbox), шапки сайта, навигации.

sharedFuncs.py
конвертация форматов ввода-вывода (float в str и обратно, конкатенация имён организма-белка-субъединицы, получение имени id-столбца таблицы и т.п.)

sharedClasses.py
основные классы для отображения БД субъед-фен. в объект и объекта в БД

fsMan.py
заведует путями и созданием/удалением объектов файловой системы

dbFace.py
интерфейс БД-python, подключение к СУБД, запросы (общие, частные запросы для скорости оставлены в отдельных файлах по месту использования)

dbEdit.py
получает инфу от объекта и пишет её в БД, создаёт, изменяет и удаляет БД и таблицы в них.

dbHtml.py
читает данные полей html-формы и генерит html для dbMan

dbMan.py *(морда)
создаёт БД-объекты, обрабатывает действия с выбранной базой: создание, редактирование описания, удаление, снятие копии (dump file)

xmler.py
создаёт БД-объект из / пишет БД-объект в xml

orgEnzMan.py *(морда)
создаёт БД-объект из базы c учётом фильтров, отображает его в таблицу (генерация html и работа с объектом не разделены)

filterClasses.py
классы фильтров и набора фильтров, работают со строками из БД (и была ещё реализация с самим БД-объектом) и используются в orgEnzMan и splitAn

filterHtml.py
читает данные полей html-формы для filterClasses и генерит html для orgEnzMan

attrColEditHtml.py
читает данные полей html-формы и генерит html для attrColEdit

attrColEdit.py *(морда)
изменение колонок свойств организма/белка/субъединицы. Создаёт, удаляет и изменяет колонки в базе.

addCol.py *(морда)
задание параметров для создаваемого свойства (генерация html и работа с объектом не разделены)

______________<очень косячная по структуре часть>____________ 

getSuSeqLoadAl.py *(морда)
генерация .fasta с последовательностями субъединиц выбранных ферментов, создание записи для сращенного выравнивания загруженных субъединиц (генерация html и работа с объектом не разделены)

alMan.py *(морда)
просмотр имеющихся выравниваний и переход к одному из них (генерация html и работа с объектом не разделены)

fusedAlViewer.py *(морда)
просмотр выравнивания **(когда в выравнивании около 100 белков - он само выравнивание может показать, но если их больше - приходится отключать вывод последовательностей), разметка его блоков, выбор белка для опорной (reference) нумерации, переход к разбиению (генерация html и работа с объектом не разделены)

fusedAlClasses.py
создаёт объект сращенного выравнивания из БД 

______________</очень косячная по структуре часть>____________

splitAn.py *(морда)
просмотр колонок, отмеченных, как блоки, задание разбиения по АК и по фильтрам, анализ разбиения, выбор референсного белка из выравнивания, задание используемых критериев и их порогов (генерация html и работа с объектом не разделены)

splitAnClasses.py
создаёт из БД объект для разбиения и разбивает его указанным способом (строки посл-тей -> колонки блоков)












